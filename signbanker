#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Docstrings are in googledoc format.
# [https://github.com/google/styleguide/blob/gh-pages/pyguide.md]
# [http://daouzli.com/blog/docstring.html#googledoc]
# [https://gist.github.com/redlotus/3bc387c2591e3e908c9b63b97b11d24e]
#
# HTML processing is done using MechanicalSoup (rather than the older Mechanize
# module).
#
"""A tool for viewing and modifying the contents of a signbank.
Usage:
  signbanker [OPTION]... COMMAND [ARG]...
  signbanker gloss SIGNBANK GLOSS_ID [FIELD VALUE]...
  signbanker help [COMMAND|GUIDE]
  signbanker lexicon SIGNBANK [LEXICON_ID]
  signbanker version

Options:
  -h,--help        show this help, help about COMMAND, or GUIDE
  -v,--version     show version information

Commands:
  gloss    show or modify the data of an individual gloss
  help     show this help, help about COMMAND, or GUIDE
  lexicon  list lexicons, or glosses in specific lexicon
  version  show version information

Logins are remembered (usually 14 days, but it depends on the signbank). This
program can be used in scripts (e.g. to import datasets with fields that are
not supported by native CSV import function).

  * Run 'signbanker help COMMAND' -- info on any above COMMAND.
  * Run 'signbanker help help' -- list of help guides.
  * Run 'signbanker help config' -- ways to simplify usage.
  * Run 'signbanker help password' -- how to provide password for scripts.
 """
def cmd_todo():
    """TODO (Not yet implemented)
    ==========================
    * Option for naming a different config file to read.
    * Fix options parsing
      (help gloss|--help gloss| gloss --help) should all result in same thing
      just '--help' or 'help' alone should give usage
      (This is hard to get right, maybe write some tests?)
    * Test on Windows: That config file works and isn't world readable
    * Output should be prettier (choice between CSV, TSV and formatted tables)
    * Zsh/Bash tab completion for options, commands and command arguments
    * Warn if user tries to connect to non-signbank web page
    * Add docstrings for all functions
    * When showing gloss, more fields are displayed than one can (presumably)
      modify. Fix this.
    * Add support for adding / removing multiple-valued field (like 'URL' --
      called 'glossurl-NUM' in the backend)
    * Disable providing password on the commandline (as it can be read in the
      process table) -- this requires some adequate other way of providing the
      password. Maybe using a shell environment variable?

    """
__title__     = 'signbanker (STS-Signbank)'
__version__   = '1.1.1'                        # https://semver.org/
__author__    = 'zrajm <zrajm@zrajm.org>'
__copyright__ = 'Copyright (C) 2021 zrajm <zrajm@klingonska.org>'
__license__   = 'GPLv2'
__info__      = \
"""License GPLv2: GNU GPL version 2 <https://www.gnu.org/licenses/gpl-2.0.html>.
You are free to share and modify this program, as long as your version use
the same license, and give credit to the original author.

Written by zrajm for the Swedish Signbank <https://signbank.ling.su.se/>,
Sign Language Section, Department of Linguistics, Stockholm university."""

import os
import re
import sys

class SignbankError(Exception): pass
class Signbank:
    """Signbank related stuff."""
    from configparser import ConfigParser
    from mechanicalsoup import StatefulBrowser
    browser = StatefulBrowser(soup_config = { 'features': 'html.parser' })
    signbank = None
    base_url = None
    username = None
    password = None
    session_cookie = None
    session_domain = None
    session_expiry = None
    config = ConfigParser()
    config_file = None
    config_part = None
    urls = {
        'show_gloss'   : 'dictionary/advanced/gloss/',
        'edit_gloss'   : 'dictionary/update/gloss/',
        'list_glosses' : 'dictionary/advanced/?paginate_by=9999999&dataset=',
        'list_lexicons': 'dictionary/advanced/',
    }
    login_form = 'login'

    def split_url(self, url):
        """Split URL into scheme, user, password, tail. Empty strings are
        returned for all non-matching fields. NOTE: RFC1738 says that '@' and
        ':' characters should be percent encoded (e.g. '@' = '%40') but they
        are not supported in user/password here.

        Args:
          url (str): User info must come after '://', or, if none occur, at
            beginning ('http://ada:secret@seti.com' and 'ada:secret@seti.com'
            are valid, but 'ada:secret@http://seti.com' is not).

        Returns:
          scheme (str): URL scheme (usually 'http://' or 'https://').
          user (str): Cannot contain '@' or ':', can be empty even if password
            is given (e.g. in 'https://:secret@seti.com/page.htm').
          password (str): Cannot not contain '@'.
          tail (str): The rest of the URL (domain + path).

        Raises:
          TypeError: If url is not a string (or bytes-like object).

        """
        (scheme, user, password, tail) = re.findall(
            # Regex will always match, since all groups are optional, or can be
            # empty. Negative lookahead forces non-match of user info before
            # 'SCHEME://'.
            r'(?i)^([a-z]*://)?(?:([^:@]*)(?::([^@]*))?@(?![a-z]*://))?(.*)',
            url,
        )[0]
        return (scheme, user, password, tail)

    def strip_url_password(self, url):
        """Return URL with password stripped."""
        (scheme, user, _, address) = self.split_url(url)
        return f"{scheme}{ f'{user}@' if user else ''}{address}"

    def parse_url(self, url):
        """Return (stripped URL, user, password) from a URL. Non-used values are set to
        None, except URL is always string (possibly empty)."""
        (scheme, user, password, address) = self.split_url(url)
        return (f"{scheme}{address}", user or None, password or None)

    def epoch(self, isodate_str):
        """Return string with integer Unix epoch. Argument is string containing either
        an ISO datetime string or Unix epoch."""
        from datetime import datetime
        if isodate_str == None or isodate_str.isdigit():
            return isodate_str
        return str(int(datetime.fromisoformat(isodate_str).timestamp()))

    def isodate(self, epoch_str):
        """Return string with time formatted according to ISO. Argument is string with
        Unix epoch."""
        from datetime import datetime
        return datetime.fromtimestamp(epoch_str).astimezone().isoformat()

    def __init__(self, signbank = None, rcfile = None):
        self.config_file = rcfile
        self.config_part = self.strip_url_password(signbank)
        self.config.read(rcfile)               # read config (if exists)
        if self.config.has_section(self.config_part): # get from config file
            self.signbank = self.get_opt('signbank')
            self.session_cookie = self.get_opt('session_cookie')
            self.session_domain = self.get_opt('session_domain')
            self.session_expiry = self.epoch(self.get_opt('session_expiry'))
            signbank = self.signbank
        else:                                  # for saving later
            self.signbank = self.config_part   #   (w/o password)

        # Split signbank URL (either from command line, or from config file).
        (self.base_url, self.username, self.password) = self.parse_url(signbank)
        if not self.username:                  # no value found, use default
            from getpass import getuser
            self.username = getuser()
        if not re.search(r'^\w+://', self.base_url): # set URL protocol
            self.base_url = f'https://{self.base_url}'
        if self.session_cookie:                # set browser session cookie
            self.set_cookie(
                'sessionid',
                value   = self.session_cookie,
                domain  = self.session_domain,
                expires = self.session_expiry,
            )

    def get_opt(self, name, section = None):
        section = section or self.config_part
        return self.config.get(section, name, fallback = None)

    def set_opt(self, options, section = None):
        section = section or self.config_part
        updated = False
        if not self.config.has_section(section):
            self.config.add_section(section)
        for (name, value) in options.items():
            if self.get_opt(name, section) != value:
                self.config.set(section, name, value)
                updated = True
        if updated:
            old_umask = os.umask(0o177)        # use '0600' file permissions
            with open(self.config_file, 'w') as fh:
                self.config.write(fh)
            os.umask(old_umask)

    def get_cookie(self, name):
        """Return the named cookie (it's a Cookie object)."""
        # https://stackoverflow.com/a/9868665/351162
        return next((c for c in self.browser.session.cookies if c.name == name), None)

    def set_cookie(self, name, value, **kwargs):
        """Set a cookie."""
        self.browser.session.cookies.set(name, value, **kwargs)

    def set_form(self, form, name, value):
        from mechanicalsoup import LinkNotFoundError
        try:
            form.set(name, value)
        except LinkNotFoundError as e:
            raise SignbankError(
                f"Cannot find form element '{name}' on signbank page\n" +
                f"(This is likely a bug or the signbank served the wrong page.)")

    def page(self, name, xtra=''):
        return f'{self.base_url}/{self.urls[name]}{xtra}'

    def login(self):
        """Given that a page containing a login form is already loaded into the
        StatefulBrowser, this function will fill in and submit the login
        form."""
        from getpass import getpass
        # Read password from terminal (if not provided as an option).
        if not self.password:
            try:
                self.password = getpass(
                    f"Signbank: {self.base_url}\n" +
                    f"{self.username}'s password: ")
            except EOFError:
                raise SignbankError(
                    f"Cannot read password from terminal\n" +
                    f"See 'signbanker help password' for some tips.")

        # Fill and submit web form.
        form = self.select_form(self.login_form)
        self.set_form(form, 'username', self.username)
        self.set_form(form, 'password', self.password)
        self.browser.submit_selected()

        # Save received 'sessionid' cookie into config file.
        cookie = self.get_cookie('sessionid')
        if cookie:
            self.set_opt({
                'signbank': self.signbank,
                'session_cookie': cookie.value,
                'session_domain': cookie.domain,
                'session_expiry': self.isodate(cookie.expires),
            })
        else:
            msg = self.get_form_msg(self.login_form)
            raise SignbankError(
                f"Login failed for signbank user '{self.username}' " +
                f"(Incorrect password?)" +
                f"\nSignbank says: {msg}" if msg else '')

    def select_form(self, form_name):
        """Return named form from browser state, or raise SignbankError if no form was
        found."""
        from mechanicalsoup import LinkNotFoundError
        try:
            return self.browser.select_form(f'[name="{form_name}"]')
        except LinkNotFoundError as e:
            url = self.browser.get_url()
            raise SignbankError(
                f"Cannot find form named '{form_name}' on page '{url}'.")

    def get_form_msg(self, form_name):
        """Return message from specified form in browser state, or None if no error
        message was found."""
        try:
            msg = self.select_form(form_name).form.select_one('.alert')
        except SignbankError:
            return None
        if msg:
            msg.button.extract()           # strip HTML close button
            return ''.join(msg.stripped_strings)
        return None

    def open(self, *args, **kwargs):
        """Wrapper for MechanicalSoup's browser.open()"""
        return self.__fetch(lambda: self.browser.open(*args, **kwargs))

    def __fetch(self, fetch_func):
        """Wrapper for all MechanicalSoup's methods that return a response."""
        from requests.exceptions import RequestException

        # First load the relevant page.
        try:
            response = fetch_func()
        except RequestException as e:
            raise SignbankError(
                f'Cannot load signbank page.\n'
                f'Error: {type(e).__name__}: {e}')

        # If login cookie isn't set, login and reload the page. (Pageload will
        # have failed, but instead we will have gotten the needed login page.)
        if not self.get_cookie('sessionid'):
            self.login()
            # This does not cause an infinite loop, since cookie 'sessionid' is
            # now GUARANTEED to be set (login() either sets it, or throws an
            # exception).
            return self.__fetch(fetch_func)

        if response.ok:
            return response
        raise SignbankError(
            f"Cannot load signbank page '{self.browser.get_url()}'\n" +
            f'Server response: {response.status_code} - {response.reason}')

    def get_csrf_token(self):
        """Returns first occurence the CSRF token (string) on a signbank page.

        A CSRF (Cross-Site Request Forgery) token occurs on all pages that have
        (at least one) form which require user privileges. If there are
        multiple forms, the CSRF token have the same value in all of them.

        For a CSRF token are only present if you a) are logged in to the
        signbank and b) on pages with forms that require user privileges (forms
        that update the database content).

        Args:
          response (mechanicalsoup.response): A HTML response with a signbank
          page.

        Returns:
          str: CSRF token.

        Raises:
          AttributeError: No CSRF token could be found.

        """
        return self.browser.get_current_page().select_one(
            f'input[name="csrfmiddlewaretoken"]'
        ).get('value')

    def list_lexicons(self):
        lexicon_url = self.page('list_lexicons')
        response = self.open(lexicon_url)
        column_name = response.soup.select_one('label[for="id_dataset"]').text
        return [
            ['ID', column_name],
            *map(
                lambda option: [option.get('value'), option.text],
                response.soup.select('select[name="dataset"] option')),
        ]

    def list_glosses(self, lexicon_id):
        """List glosses in lexicon."""
        if not re.search(r'^\d+$', lexicon_id):
            raise SignbankError(f"LEXICON_ID must be numeric (not '{lexicon_id}')")
        def space_cleanup(x):
            return re.sub(r'\s+', ' ', (' '.join(x.stripped_strings)))
        list_url = self.page('list_glosses', lexicon_id)
        response = self.open(list_url)   # FIXME: should be get request(?)
        main_table = response.soup.select_one('main table')
        return [
            ['ID', *map(space_cleanup, main_table.select('thead tr th'))],
            *map(
                lambda row: [row.a['href'].split('/')[-1], *map(space_cleanup, row.select('td'))],
                main_table.select('tbody tr')),
        ]

    def show_gloss(self, gloss_id):
        """Display info of a gloss_id."""
        if not re.search(r'^\d+$', gloss_id):
            raise SignbankError(f"GLOSS_ID must be numeric (not '{gloss_id}')")
        view_url = self.page('show_gloss', gloss_id)
        response = self.open(view_url)
        return map(
            lambda tag: [tag.get('id'), [*tag.contents, ''][0]],
            response.soup.select('div#definition .edit'),
        )

    def edit_gloss(self, gloss_id, fields, values):
        if not re.search(r'^\d+$', gloss_id):
            raise SignbankError(f"GLOSS_ID must be numeric (not '{gloss_id}')")
        view_url = self.page('show_gloss', gloss_id)
        response = self.open(view_url)
        token    = self.get_csrf_token()
        print('Setting:')
        modify_url = self.page('edit_gloss', gloss_id)
        for (field, value) in zip(fields, values):
            print(f"  {field}: '{value}'")
            self.browser.post(
                modify_url,
                data = {
                    'csrfmiddlewaretoken': token,
                    'id': field,
                    'value': value,
                },
            )

def prettify_docopt_error(e):
    from os.path import basename
    msg = None
    if type(e).__name__ == 'DocoptExit':       # prettify docopt errors
        # Remove 'usage:' info.
        msg = re.sub(r'(?:^|\s+)usage:.*', '', e.code, flags=re.IGNORECASE | re.DOTALL)
        msg = re.sub(r'-\S+', "Option '\g<0>'", msg) # quote option names
        if not msg:                            # if msg is empty
            msg = 'Bad arguments'
        # For docopt errors, append helpful tip.
        msg += f"\nTry '{__file__} help' for more information."
    return (basename(__file__) + ': ' + (msg or str(e)))

def rcfile():
    """Return name of config file. This hopefully returns a sane filename on
    Windows, Linux and Mac platforms (only tested on Linux)."""
    # Inspired by https://stackoverflow.com/a/53222876/351162
    from os import getenv
    from os.path import (basename, join)
    rcfiles = (
        ('%s.cfg', 'APPDATA'),       # on Windows
        ('%src', 'XDG_CONFIG_HOME'), # XDG desktop standard
        ('.%src', 'HOME'))           # old Unix 'standard'
    for (file_tmpl, dir_env) in rcfiles:
        path = getenv(dir_env)
        if path:
            return join(path, file_tmpl % basename(__file__))
    return None

def parse_argv(doc, argv):
    from docopt import (docopt, DocoptExit)

    def get_commands():
        """Return a list of commands from main program docstring."""
        text = re.findall(r'(?is)Commands:(.*?)(?=\n\n)', cmd_help())[0]
        return re.findall(r'(?m)^\s{2,4}(\w*)', text)

    def parse_leading_argv(doc, argv):
        """Returns two-value tuple with the dictionary returned by Docopt, and a list
        containing any remaining command line arguments.

        This runs everything up to, and including, the first non-option (ie,
        argument that does not start with '-') through Docopt. If Docopt return
        failure, we find the next occurring non-option and try again, etc,
        until all possibilities have been exhausted. If all attempts at running
        Docopt fail, raise an error (with a message suitable for outputting on
        the command line). Unfortunately, many of the error messages are vague,
        but I've tried to add as much context and clarity as is possible
        (Docopt isn't really helpful in this regard, unfortunately).

        Args:
          doc (str): Docopt style docstring.
          argv (List[str]): Command line arguments.

        Returns:
          args (dict): Dictionary of options returned from Docopt.
          subargv (List[str]): Arguments to COMMAND (excluding COMMAND itself).

        Raises:
          SignbankError: If parse fails.

        """
        error = None
        error_message = "Unknown options%s. See 'signbanker help'."

        # Split argv on possible COMMAND, at try to parse args + command.
        for (i, arg) in enumerate(argv, 0):
            if not arg.startswith('-'):            # if arg is non-option
                preargv = argv[0:i+1]              #   leading args + COMMAND
                subargv = argv[i+1:]               #   args after COMMAND
                try:                               #   parse opts + COMMAND
                    return (docopt(doc, preargv, help = False), subargv)
                except DocoptExit as e:            # ON FAIL: keep error msg
                    error = error or SignbankError(
                        error_message % f" before command '{arg}'")

        # No solution found, try full command line.
        try:
            return (docopt(doc, argv, help = False), [])
        except DocoptExit:
            error = error or SignbankError(error_message % '')
        raise error

    def parse_override_opts(args, subargv, cmd, options):
        """Promotes the first occurrence of the specified options to a (sub)command.
        This is used to post-process the argv, to allow the options like
        '--help' and '--version' to appear anywhere on the command line
        (otherwise they could not appear after a (sub)command).

        First, `subargv` is searched and all matching options are removed from
        there and have their corresponding values set in `args`. E.g. the if
        the `options` = `(('--help', '-h'), ('--version', '-v'))` then all
        occurrences of the options '-h', '--help', '-v', and '--version' will
        be removed from `subargv`, and set the matching `args['--help']` or
        `args['--version']` value to True.

        Second, `args` is searched in the order specified in `options`, and the
        first matching option is copied as a command to `args[cmd]` (any
        previous value of `args[cmd]` is appended to the beginning of
        `subargv`). If the option '--version' is the first matching, then
        `args[cmd]` will be set to 'version'.

        Args:
          args (dict): Dictionary of options as returned from Docopt.
          subargv (List[str]): Arguments to COMMAND (excluding COMMAND itself)
          cmd (str): Name in `args` for the COMMAND.
          options (List[List[[str]]): A list where each element is a list of
            option names. The first option name must be a long option, with two
            leading dashes (e.g. '--version') subsequent option names can be in
            any format. Given the tuple ('--version', '-V') any occurrence of
            either '--version' or '-V' will set `args[cmd]` to 'version' and
            also set `args['--version']` to True.

        Returns:
          args (dict): Dictionary of options returned from Docopt.
          subargv (List[str]): Arguments to COMMAND (excluding COMMAND itself).

        """
        # FIXME: Option is moved even if occurs as optarg, or after '--'. :(
        # FIXME: Avoid looping over 'subargv' multiple times(?)
        # Move ALL matching opts in subargv to global option.
        for opts in options:
            long_opt = opts[0]
            for (i, arg) in enumerate(subargv):# look in subcommand options
                if arg in opts:                #   if short or longopt
                    args[long_opt] = True      #   set global option
                    del subargv[i]             #   remove from subcommand

        # Copy global option to `arg[cmd]`.
        for opts in options:
            long_opt = opts[0]
            if args.get(long_opt, None):       # if global option set
                prevcmd = args.get(cmd, None)  #   get current COMMAND
                if prevcmd != None:            #     prepend it to subcmd argv
                    subargv.insert(0, prevcmd)
                args[cmd] = long_opt[2:]       #   set COMMAND to opt w/o '--'
                break
        return (args, subargv)

    ############################################################################

    (args, subargv) = parse_leading_argv(doc, argv)
    # FIXME: 'COMMAND' and option list should be extracted from cmd_help() text
    (args, subargv) = parse_override_opts(
        args, subargv, 'COMMAND',
        (('--version', '-v'), ('--help', '-h'))
    )

    # No COMMAND specified.
    if args['COMMAND'] == None: raise SignbankError(
        f"Please specify a COMMAND. See 'signbanker help'.\n" +
        re.findall(r'(?is)Usage:.*?(?=\n\n)', cmd_help())[0])

    # Unknown COMMAND.
    if not args['COMMAND'] in get_commands(): raise SignbankError(
        f"'{args['COMMAND']}' is not a signbanker command. See 'signbanker help'.")

    # Global options parsing done. Now parse (sub)COMMAND and ITS args.
    try:
        subargs = docopt(
            cmd_help(args['COMMAND'], raw = True),
            [args['COMMAND']] + subargv,
            help = False)
        del subargs[args['COMMAND']]           # remove command name
        subargs = {                            # downcase key names
            key.lower(): value for (key, value) in subargs.items()
        }
        return (args, subargs)
    except DocoptExit:
        if args.get('--' + args['COMMAND'], None):
            # If invoked via --help or --version.
            msg = f"Bad arguments for '--{args['COMMAND']}'. "
        else:
            msg = f"Bad arguments for command '{args['COMMAND']}'. "
        raise SignbankError(
            msg +
            f"See 'signbanker help {args['COMMAND']}'.\n" +
            re.findall(r'(?is)Usage:.*?(?=\n\n)', cmd_help(args['COMMAND']))[0])

################################################################################
##  Command Line Functions

def cmd_config():
    """Singbanker stores its settings in a config file, the name of that file is
    depend on your system, but is the first found of:

      * %USERPROFILE%\signbank.cfg (Windows)
      * $XDG_CONFIG_HOME/signbankrc (most modern Linux distros)
      * $HOME/.signbankrc (older Linux distros and MacOS)

    When you successfully connect to a signbank for the first time, an entry is
    created, and the relevant URL and login data is saved (passwords are never
    saved). For example:

      [signbank.ling.su.se]
      signbank = signbank.ling.su.se
      session_cookie = vuwbcfb8pukkk12znqbrski1m4kjywzz
      session_domain = signbank.ling.su.se
      session_expiry = 2021-05-04T06:19:37+02:00

    The section heading '[signbank.ling.su.se]' is the SIGNBANK argument, as
    first given on the command line. You may edit the file, and change the
    section name to something else, after which you can refer to it using that
    name. (I.e. if you were to change the above section name to '[su]', you
    could thereafter use 'su' to refer to the signbank, e.g. 'signbanker
    lexicon su'.)

    The 'signbank' value have the same syntax as the SIGNBANK argument. (See
    'signbanker help password').

      [devel]
      signbank = http://ada@localhost:8000
      ...

    If no URL schema is given, it defaults to 'https://', if no username is
    given it defaults to the username of the user that runs this program.

    """

def cmd_gloss(signbank, gloss_id, field = [], value = []):
    """Show or modify the data of an individual gloss.
    Usage: signbanker gloss SIGNBANK GLOSS_ID [FIELD VALUE]...

    SIGNBANK is URL, or config name (see 'signbanker help config'), identifying
    the signbank to communicate with. Signbank username can be specified in the
    URL (e.g. https://alice@signbank.com/). If not given, will try the name of
    the currently logged in user. (See also 'signbanker help password'.)

    Without FIELD/VALUE pairs, output all fields for given gloss. Each field is
    output on a separate line, with field name first followed whitespace, and
    thereafter field value. (Field names never contain spaces.) If a field
    value is unset, this is shown as '-'.

    With one or more FIELD/VALUE pairs given, these values will be updated in
    the signbank. NOTE: Currently the updating of values is pretty naïve,
    simple single-valued fields work fine, but some fields (like 'URL') have
    multiple values which can be added and deleted separately -- these can
    unfortunately not yet be modified with this tool.)

    """
    signbank = Signbank(signbank, rcfile())
    if value:
        signbank.edit_gloss(gloss_id, field, value)
    else:
        return signbank.show_gloss(gloss_id)

def cmd_help(command = None, guide = None, raw = None, **_):
    """Show general help, help about a specific COMMAND, or a GUIDE.
    Usage: signbanker help [COMMAND|GUIDE]

    Show help message for this program, or, if a COMMAND is specified, show
    more detailed help information for the given command.

    The option --help (or -h) may be put anywhere on the command line, and will
    display information about COMMAND (if any), ignoring all other options and
    arguments.

    Guides:
      config    how to edit the config and to simplify usage
      password  how to provide a password for automated scripting
      todo      list of ideas and planned features for this program

    """
    from inspect import cleandoc
    command = command or guide
    if __doc__ == None:
        raise SignbankError(
            f"Required docstrings not found in program file\n" +
            "    (This program cannot be run with the Python '-OO' option!)")
    try:
        docstr = eval(f'cmd_{command}.__doc__') if command else __doc__
    except:
        raise SignbankError(
            f"'{command}' is not a COMMAND/GUIDE. See 'signbanker help help'.\n" +
            re.findall(r'(?is)Usage:.*?(?=\n\n)', cmd_help('help'))[0])
    if raw:
        # For passing to Docopt. (Replace all '(default: ...)' with empty
        # values here. (This is to make inline defaults overrideable by config
        # file values, and those in turn overrideable by command line args.)
        return re.sub(
            r'(?i)\(default: .*?\)', '[default: ]', # clear '(default: ...)'
            (docstr
                .replace('COMMAND [ARG]...','[COMMAND]')
                .replace('[OPTION]...', '[options]')
            ))
    else:
        # Prettify docstring somewhat for output to human eyes.
        return cleandoc(docstr)

def cmd_lexicon(signbank, lexicon_id = None):
    """List lexicons, or glosses in a specific lexicon.
    Usage: signbanker lexicon SIGNBANK [LEXICON_ID]

    SIGNBANK is URL, or config name (see 'signbanker help config'), identifying
    the signbank to communicate with. Signbank username can be specified in the
    URL (e.g. https://alice@signbank.com/). If not given, will try the name of
    the currently logged in user. (See also 'signbanker help password'.)

    Without LEXICON_ID, output list of lexicons found in the signbank. The
    following columns are output:

      * Lexicon ID (use with this command)
      * Lexicon name

    With a LEXICON_ID is specified, list the glosses in that lexicon. The
    following columns are output:

      * Gloss ID (use with 'gloss' command)
      * Lexicon
      * Gloss
      * English gloss
      * Translations
      * Notes
      * Tags

    Output is in a tab-separated format.

    """
    signbank = Signbank(signbank, rcfile())
    if lexicon_id:
        return signbank.list_glosses(lexicon_id)
    else:
        return signbank.list_lexicons()

def cmd_password():
    """Signbanker will ask you for a password whenever it is needed, it will
    thereafter remember the login session (but not the password). For as long
    as the login session is valid no new password is needed (this is usually 14
    days, but it depends on the signbank).

    A password MAY be provided on the command line (for example, for use in
    cronjobs, or other long-running scripts). THIS IS USUALLY A BAD IDEA. If
    you really need it, you should be aware of the following:

    1. Passwords given on the command line are visible to ANY USER on the
       computer where the program is runs. On Linux, this can be done with the
       'ps' command, or by looking at processes in '/proc/*/cmdline'. Only use
       a password on the command line on a computer WHERE ONLY YOU CAN LOG IN.

    2. 'Http' is not secure (but 'https' is). Passwords sent via 'http' may be
       as they travel across the network. USE HTTPS!

    3. To lessen the impact of a stolen password, don't use the same password
       as for anything important. (It would be kinda embarrassing if someone
       got hold of your password, and then used it to read your email, access
       your bank account, and login to your social media, wouldn't it?)

    4. Commands are stored in the shell history (e.g. ~/.bash_history). Edit
       that file to remove offending commands with password, or use 'unset
       HISTORY' to disable history (until you exit the shell).

    If you REALLY need to a password on the command line, you can add it to the
    SIGNBANK argument after the username (e.g. https://ada:pass@signbank.com),
    or better yet add it to the 'signbank' value in the config file (see
    'signbanker help config') and load it from there. (Passwords loaded this
    way does not show up in the process table, meaning that for another user to
    get hold of it, they need to first obtain read access to your config file.)

    """

def cmd_version(**_):
    """Show version information for the signbanker program.
    Usage: signbanker version

    Display version information and exit.

    """
    return f'{__title__} {__version__}\n{__copyright__}\n{__info__}'

################################################################################
##  Main

def main(args, subargs):
    command = args.get('COMMAND', '')          # signbanker command
    command_func = eval(f"cmd_{command}")      # existance tested in opt parse
    out = command_func(**subargs)              # run signbanker command
    if isinstance(out, str):                   # output returned result
        print(out)
    else:
        for cols in out or []:
            print('\t'.join(cols))
    raise SystemExit(0)

################################################################################
## Invoke program

# Which (Debian or pip) package to install when a Python module is missing.
package_name = {
    'docopt':         { 'deb': 'python3-docopt',         'pip': 'docopt' },
    'mechanicalsoup': { 'deb': 'python3-mechanicalsoup', 'pip': 'MechanicalSoup' },
}
if __name__ == '__main__':
    try:
        # Parse command line args and pass them to main().
        main(*parse_argv(cmd_help(raw = True), sys.argv[1:]))
    except KeyboardInterrupt:
        print('\n*** BREAK: Killed by ^C (SIGINT signal)', file = sys.stderr)
        raise SystemExit(130)
    except SignbankError as e:
        print(prettify_docopt_error(e), file = sys.stderr)
        raise SystemExit(5)
    except ModuleNotFoundError as e:
        print(f"ERROR: Cannot load the required Python module '{e.name}'.\n" + (
            f"To install, run one of following commands (depending on your system):\n\n"
            f"    sudo apt install {package_name[e.name]['deb']}  # (Debian/Ubuntu etc.)\n"
            f"    pip install {package_name[e.name]['pip']}               # (Python installer)\n"
            if e.name in package_name.keys() else
            f"    (Are you sure that that module is installed on your system?)"
        ), file = sys.stderr)
        raise SystemExit(10)

#[eof]
