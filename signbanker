#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Docstrings are in googledoc format.
# [https://github.com/google/styleguide/blob/gh-pages/pyguide.md]
# [http://daouzli.com/blog/docstring.html#googledoc]
# [https://gist.github.com/redlotus/3bc387c2591e3e908c9b63b97b11d24e]
#
# HTML processing is done using MechanicalSoup (rather than the older Mechanize
# module).
#
"""View or modify information in a Signbank.
Usage:
  signbanker [options]
  signbanker [options] gloss GLOSS_ID [FIELD VALUE]...
  signbanker [options] help [COMMAND|GUIDE] [IGNORED]...
  signbanker [options] lexicon [LEXICON_ID]

Options:
  -b,--base=URL    signbank address [default: http://localhost:8000]
  -h,--help        show this help, or help about COMMAND/GUIDE, then exit
  -l,--login=USER  username/password for signbank login [default: %s]
                   (see also 'signbanker help password')
  -v,--version     display version information and exit

Commands:
  gloss    show or edit the data of individual gloss
  help     show this help, or help about COMMAND, then exit
  lexicon  list available lexicons, or glosses in a given lexicon

To access a signbank, a URL and login/password is needed. Signbanker tries to
make life as easy as possible for you, by providing reasonable defaults, and
caching the signbank login token between invocations (the token is normally
valid for about 14 days, after which you will have to type your password
again). For a list of help guides, see 'signbanker help help'.

"""
def cmd_todo():
    """TODO (Not yet implemented)
    ==========================
    * Set permissions of config file, so that other users can't read it
    * Save cookie timestamp as ISO date, not epoch
    * Fix options parsing
      (help gloss|--help gloss| gloss --help) should all result in same thing
      just '--help' or 'help' alone should give usage
      (This is hard to get right, maybe write some tests?)
    * Output should be prettier (choice between CSV, TSV and formatted tables)
    * Zsh/Bash tab completion for options, commands and command arguments
    * More SSH-like command line, where one host or section argument is
      mandatory on command line
    * Support for multiple signbank configurations in same config file
    * Warn if user tries to connect to non-signbank web page
    * Add docstrings for all functions
    * When showing gloss, more fields are displayed than one can (presumably)
      modify. Fix this.
    * Add support for adding / removing multiple-valued field (like 'URL' --
      called 'glossurl-NUM' in the backend)
    * Rewrite --help info & processing
      Should say 'Usage: signbanker [options] COMMAND [ARG]...', and then
      delegate the ARG processing using the docstring of the respective cmd_*
      functions, using '[options]' as global options (password, url etc.) but
      allowing for command-specific options as well.
    * Add 'profiles' in config file
      So that one may set up URL, login and password in separate for specific
      scenarios, and use an option (maybe --config=NAME?) to specify which
      profile to use?
    * Disable providing password on the commandline (as it can be read in the
      process table) -- this requires some adequate other way of providing the
      password.

    """
__title__     = 'signbanker (STS-Signbank)'
__version__   = '0.4.2'                        # https://semver.org/
__author__    = 'zrajm <zrajm@zrajm.org>'
__copyright__ = 'Copyright (C) 2021 zrajm <zrajm@klingonska.org>'
__license__   = 'GPLv2'
__info__      = \
"""License GPLv2: GNU GPL version 2 <https://www.gnu.org/licenses/gpl-2.0.html>.
You are free to share and modify this program, as long as your version use
the same license, and give credit to the original author.

Written by zrajm for the Swedish Signbank <https://signbank.ling.su.se/>,
Sign Language Section, Department of Linguistics, Stockholm university."""

import re
import sys

class SignbankError(Exception): pass
class Signbank:
    """Signbank related stuff."""
    from configparser import ConfigParser
    from mechanicalsoup import StatefulBrowser
    browser = StatefulBrowser(soup_config = { 'features': 'html.parser' })
    base_url = None
    username = None
    password = None
    session_cookie = None
    session_domain = None
    session_expiry = None
    config = ConfigParser()
    config_file = None
    config_part = None
    urls = {
        'show_gloss'   : 'dictionary/advanced/gloss/',
        'edit_gloss'   : 'dictionary/update/gloss/',
        'list_glosses' : 'dictionary/advanced/?paginate_by=9999999&dataset=',
        'list_lexicons': 'dictionary/advanced/',
    }
    login_form = 'login'

    def __init__(self, url = None, user = None, password = None, rcfile = None,
                 default_user = None, default_url = None):
        self.username = default_user           # help text defaults
        self.base_url = default_url
        if rcfile:                             # read config file
            self.config_file = rcfile
            self.config_part = 'primary'
            self.config.read(rcfile)
            self.base_url = self.get_opt('signbank') or self.base_url
            self.username = self.get_opt('username') or self.username
            self.session_cookie = self.get_opt('session_cookie')
            self.session_domain = self.get_opt('session_domain')
            self.session_expiry = self.get_opt('session_expiry')
        self.base_url = url  or self.base_url  # overwrite with options
        self.username = user or self.username
        self.password = password
        if not self.config.has_section(self.config_part):
            self.config.add_section(self.config_part)
            self.set_opt({
                'signbank': self.base_url,
                'username': self.username,
            })
        if not re.search(r'^\w+://', self.base_url): # set URL protocol
            self.base_url = f'https://{url}'
        if self.session_cookie:                # set browser session cookie
            self.set_cookie(
                'sessionid',
                value   = self.session_cookie,
                domain  = self.session_domain,
                expires = self.session_expiry,
            )

    def get_opt(self, name, section = None):
        section = section or self.config_part
        return self.config.get(section, name, fallback = None)

    def set_opt(self, options, section = None):
        section = section or self.config_part
        updated = False
        for (name, value) in options.items():
            if self.get_opt(name, section) != value:
                self.config.set(section, name, value)
                updated = True
        if updated:
            with open(self.config_file, 'w') as fh:
                self.config.write(fh)

    def get_cookie(self, name):
        """Return the named cookie (it's a Cookie object)."""
        # https://stackoverflow.com/a/9868665/351162
        return next((c for c in self.browser.session.cookies if c.name == name), None)

    def set_cookie(self, name, value, **kwargs):
        """Set a cookie."""
        self.browser.session.cookies.set(name, value, **kwargs)

    def set_form(self, form, name, value):
        from mechanicalsoup import LinkNotFoundError
        try:
            form.set(name, value)
        except LinkNotFoundError as e:
            raise SignbankError(
                f"Cannot find form element '{name}' on signbank page\n" +
                f"(This is likely a bug or the signbank served the wrong page.)")

    def page(self, name, xtra=''):
        return f'{self.base_url}/{self.urls[name]}{xtra}'

    def login(self):
        """Given that a page containing a login form is already loaded into the
        StatefulBrowser, this function will fill in and submit the login
        form."""
        from getpass import getpass
        from datetime import datetime
        # Read password from terminal (if not provided as an option).
        if not self.password:
            try:
                self.password = getpass(
                    f"Signbank: {self.base_url}\n" +
                    f"{self.username}'s password: ")
            except EOFError:
                raise SignbankError(
                    f"Cannot read password from terminal\n" +
                    f"See 'signbanker help password' for some tips.")

        # Fill and submit web form.
        form = self.select_form(self.login_form)
        self.set_form(form, 'username', self.username)
        self.set_form(form, 'password', self.password)
        self.browser.submit_selected()

        # Save received 'sessionid' cookie into config file.
        cookie = self.get_cookie('sessionid')
        if cookie:
            self.set_opt({
                'session_cookie':     cookie.value,
                'session_domain':     cookie.domain,
                'session_expiry': str(cookie.expires),
            })
        else:
            msg = self.get_form_msg(self.login_form)
            raise SignbankError(
                f"Login failed for signbank user '{self.username}' " +
                f"(Misspelled password?)" +
                f"\nSignbank says: {msg}" if msg else '')

    def select_form(self, form_name):
        """Return named form from browser state, or raise SignbankError if no form was
        found."""
        from mechanicalsoup import LinkNotFoundError
        try:
            return self.browser.select_form(f'[name="{form_name}"]')
        except LinkNotFoundError as e:
            url = self.browser.get_url()
            raise SignbankError(
                f"Cannot find form named '{form_name}' on page '{url}'.")

    def get_form_msg(self, form_name):
        """Return message from specified form in browser state, or None if no error
        message was found."""
        try:
            msg = self.select_form(form_name).form.select_one('.alert')
        except SignbankError:
            return None
        if msg:
            msg.button.extract()           # strip HTML close button
            return ''.join(msg.stripped_strings)
        return None

    def open(self, *args, **kwargs):
        """Wrapper for MechanicalSoup's browser.open()"""
        return self.__fetch(lambda: self.browser.open(*args, **kwargs))

    def __fetch(self, fetch_func):
        """Wrapper for all MechanicalSoup's methods that return a response."""
        from requests.exceptions import RequestException

        # First load the relevant page.
        try:
            response = fetch_func()
        except RequestException as e:
            raise SignbankError(
                f'Cannot load signbank page.\n'
                f'Error: {type(e).__name__}: {e}')

        # If login cookie isn't set, login and reload the page. (Pageload will
        # have failed, but instead we will have gotten the needed login page.)
        if not self.get_cookie('sessionid'):
            self.login()
            # This does not cause an infinite loop, since cookie 'sessionid' is
            # now GUARANTEED to be set (login() either sets it, or throws an
            # exception).
            return self.__fetch(fetch_func)

        if response.ok:
            return response
        raise SignbankError(
            f"Cannot load signbank page '{self.browser.get_url()}'\n" +
            f'Server response: {response.status_code} - {response.reason}')

    def get_csrf_token(self):
        """Returns first occurence the CSRF token (string) on a signbank page.

        A CSRF (Cross-Site Request Forgery) token occurs on all pages that have
        (at least one) form which require user privileges. If there are
        multiple forms, the CSRF token have the same value in all of them.

        For a CSRF token are only present if you a) are logged in to the
        signbank and b) on pages with forms that require user privileges (forms
        that update the database content).

        Args:
          response(mechanicalsoup.response): A HTML response with a signbank page.

        Returns:
          string: CSRF token.

        Raises:
          AttributeError: No CSRF token could be found.
        """
        return self.browser.get_current_page().select_one(
            f'input[name="csrfmiddlewaretoken"]'
        ).get('value')

    def list_lexicons(self):
        lexicon_url = self.page('list_lexicons')
        response = self.open(lexicon_url)
        column_name = response.soup.select_one('label[for="id_dataset"]').text
        return [
            ['ID', column_name],
            *map(
                lambda option: [option.get('value'), option.text],
                response.soup.select('select[name="dataset"] option')),
        ]

    def list_glosses(self, lexicon_id):
        """List glosses in lexicon."""
        if not re.search(r'^\d+$', lexicon_id):
            raise SignbankError(f"LEXICON_ID must be numeric (not '{lexicon_id}')")
        def space_cleanup(x):
            return re.sub(r'\s+', ' ', (' '.join(x.stripped_strings)))
        list_url = self.page('list_glosses', lexicon_id)
        response = self.open(list_url)   # FIXME: should be get request(?)
        main_table = response.soup.select_one('main table')
        return [
            ['ID', *map(space_cleanup, main_table.select('thead tr th'))],
            *map(
                lambda row: [row.a['href'].split('/')[-1], *map(space_cleanup, row.select('td'))],
                main_table.select('tbody tr')),
        ]

    def show_gloss(self, gloss_id):
        """Display info of a gloss_id."""
        if not re.search(r'^\d+$', gloss_id):
            raise SignbankError(f"GLOSS_ID must be numeric (not '{gloss_id}')")
        view_url = self.page('show_gloss', gloss_id)
        response = self.open(view_url)
        return map(
            lambda tag: [tag.get('id'), [*tag.contents, ''][0]],
            response.soup.select('div#definition .edit'),
        )

    def edit_gloss(self, gloss_id, fields, values):
        if not re.search(r'^\d+$', gloss_id):
            raise SignbankError(f"GLOSS_ID must be numeric (not '{gloss_id}')")
        view_url = self.page('show_gloss', gloss_id)
        response = self.open(view_url)
        token    = self.get_csrf_token()
        print('Setting:')
        modify_url = self.page('edit_gloss', gloss_id)
        for (field, value) in zip(fields, values):
            print(f"  {field}: '{value}'")
            self.browser.post(
                modify_url,
                data = {
                    'csrfmiddlewaretoken': token,
                    'id': field,
                    'value': value,
                },
            )

def prettify_docopt_error(e):
    from os.path import basename
    msg = None
    if type(e).__name__ == 'DocoptExit':       # prettify docopt errors
        # Remove 'usage:' info.
        msg = re.sub(r'(?:^|\s+)usage:.*', '', e.code, flags=re.IGNORECASE | re.DOTALL)
        msg = re.sub(r'-\S+', "Option '\g<0>'", msg) # quote option names
        if not msg:                            # if msg is empty
            msg = 'Bad arguments'
        # For docopt errors, append helpful tip.
        msg += f"\nTry '{__file__} help' for more information."
    return (basename(__file__) + ': ' + (msg or str(e)))

def get_command(args):
    """Return name of command given on command line that is set to True, and which
    has a corresponding to a 'cmd_{command}' function in the code.
    """
    for arg in args:
        if args[arg] == True:
            try: eval(f'cmd_{arg}')
            except NameError: continue
            return arg

def get_default(optstr):
    """Return Docopt '[default:...]' from the help text of given option."""
    from re import search
    value = search(optstr + r'\b.*\[default: (.*)\]', cmd_help())
    return value[1] if value else None

def rcfile():
    """Return name of config file. This hopefully returns a sane filename on
    Windows, Linux and Mac platforms (only tested on Linux)."""
    # Inspired by https://stackoverflow.com/a/53222876/351162
    from os import getenv
    from os.path import (basename, join)
    rcfiles = (
        ('%s', 'APPDATA'),           # on Windows
        ('%src', 'XDG_CONFIG_HOME'), # XDG desktop standard
        ('.%src', 'HOME'))           # old Unix 'standard'
    for (file_tmpl, dir_env) in rcfiles:
        path = getenv(dir_env)
        if path:
            return join(path, file_tmpl % basename(__file__))
    return None

################################################################################
##  Command Line Functions

def cmd_gloss(signbank, gloss_id, fields = [], values = []):
    """signbanker [options] gloss GLOSS_ID [FIELD VALUE]...

    Without FIELD/VALUE pairs, output all fields for given gloss. Each field is
    output on a separate line, with field name first followed whitespace, and
    thereafter field value. (Field names never contain spaces.) If a field
    value is unset, this is shown as '-'.

    With one or more FIELD/VALUE pairs given, these values will be updated in
    the signbank. NOTE: Currently the updating of values is pretty naïve,
    simple single-valued fields work fine, but some fields (like 'URL') have
    multiple values which can be added and deleted separately -- these can
    unfortunately not yet be modified with this tool.)

    """
    if values:
        signbank.edit_gloss(gloss_id, fields, values)
    else:
        return signbank.show_gloss(gloss_id)

def cmd_help(command = None, raw = None):
    """signbanker [options] help [COMMAND|GUIDE]
    signbanker [options] (-h|--help) [COMMAND|GUIDE]
    signbanker [options] [COMMAND|GUIDE] (-h|--help)

    Show help message for this script, or, if a COMMAND is specified, show more
    detailed help information for the given command.

    The option --help (or -h) may be put anywhere on the command line, and will
    display information about COMMAND (if any), ignoring all other options and
    arguments.

    Guides:
      todo      list of ideas and planned features for this script
      password  how to (securely) specify a signbank password
    """
    from inspect import cleandoc
    from getpass import getuser
    if __doc__ == None:
        raise SignbankError(
            f"Required docstrings not found in program file\n" +
            "    (This program cannot be run with the Python '-OO' option!)")
    if command:
        try:
            docstr =  eval(f'cmd_{command}.__doc__')
        except NameError:
            raise SignbankError(
                f"'{command}' is not a signbanker COMMAND or GUIDE.\n" +
                "Use 'signbanker help' (for commands) or 'signbanker help " +
                "help' (for guides).")
    else:
        # Expand docstring --login '[default: %s]' with current username here.
        docstr = __doc__ % getuser()
    if raw:
        # For passing to Docopt. (Replace all '[default: ...]' with empty
        # values here. (This is to make inline defaults overrideable by config
        # file values, and those in turn overrideable by command line args.)
        return re.sub(r'(?<=\[default: )(.*)(?=\])', '', docstr, flags=re.I)
    else:
        # Prettify docstring somewhat for output to human eyes.
        return cleandoc(docstr
            .replace(' [IGNORED]...', '')
            .replace('[options]', '[OPTION]...'))

def cmd_lexicon(signbank, lexicon_id = None):
    """signbanker [options] lexicon [LEXICON_ID]

    Without LEXICON_ID, output list of lexicons found in the signbank. The
    following columns are output:

      * Lexicon ID (use with this command)
      * Lexicon name

    With a LEXICON_ID is specified, list the glosses in that lexicon. The
    following columns are output:

      * Gloss ID (use with 'gloss' command)
      * Lexicon
      * Gloss
      * English gloss
      * Translations
      * Notes
      * Tags

    Output is in a tab-separated format.
    """
    if lexicon_id:
        return signbank.list_glosses(lexicon_id)
    else:
        return signbank.list_lexicons()

def cmd_password():
    """Signbanker will prompt for a password whenever needed, but in some special
    circumstances this might not work for you (for example if you're running
    signbanker from some other script). In these cases, you may provide a
    password after the username (separated by a colon) after the --login option.

    However, you should be aware that executed commands (and their arguments)
    can be seen by ALL USERS on the same computer. (On Linux this can be done
    either using the 'ps' command, or by looking at the '/proc/PID/cmdline'
    file for the command in question.)

    So if you use the PASSWORD part of the --login=USER[:PASSWORD] option,
    consider the following:

    1. To minimize the risk of someone else being able to see your password
       while the program is running, only specify a password as an argument on
       your private computer (a computer where no one else can log in). If
       another user have access to the same computer, they don't necessarily
       have to be logged in when the command runs (they could leave a
       long-running script).

    2. To lessen bad consequences if someone were to get hold of your password,
       make sure you don't use the same password for your signbank as you do
       for other services. (It would be kinda embarrassing if someone were to
       get hold of your password, and then could use that to read your email,
       access your bank account, and login to your social media, wouldn't it?)

    3. Commands executed in a terminal are usually saved in the shell history
       (on Linux, this is usually found in ~/.bash_history). The permissions on
       are such that users on the computer cannot read the history file, but
       since file remain on the computer, it can be accessed months or even
       years after it was written, and so it might be worth removing the
       offending commands (or maybe even deleting the history file) to erase
       your password. (Some shells allow you to suppress history saving of a
       command by preceding it with a space, and on Linux you can use the
       command 'unset HISTFILE' to disable history saving until you exit the
       current shell.)

    """

################################################################################
##  Main

def main(args):
    # Docopt command line values.
    base_url = args['--base']                  # optional (string)
    gloss_id = args['GLOSS_ID']                # optional (string)
    fields   = args['FIELD']                   # optional (list)
    values   = args['VALUE']                   # optional (list)
    (username, password) = map(
        lambda x: x or None,
        [*(args['--login'] or '').split(':', 1), ''][:2],
    )
    # If '--help' option is used, turn this into 'help' command.
    # (Set command to 'help' and copy signbanker command into 'COMMAND' arg.)
    if args['--help']:
        args['COMMAND'] = get_command(args)
        args['help'] = True

    # Informational commands.
    if args['help']:
        print(cmd_help(args['COMMAND']))
        raise SystemExit(0)
    if args['--version']:
        print(f'{__title__} {__version__}\n{__copyright__}\n{__info__}')
        raise SystemExit(0)

    # Signbank commands.
    signbank = Signbank(
        base_url, username, password, rcfile(),
        default_user = get_default('--user'),
        default_url  = get_default('--base'),
    )
    out = []
    if args['gloss']:                          # 'gloss' subcommand
        out = cmd_gloss(signbank, gloss_id, fields, values)
    elif args['lexicon']:                      # 'lexicon' subcommand
        out = cmd_lexicon(signbank, args['LEXICON_ID'])
    for cols in out or []:
        print('\t'.join(cols))

################################################################################
## Invoke program

# Which (Debian or pip) package to install when a Python module is missing.
package_name = {
    'docopt':         { 'deb': 'python3-docopt',         'pip': 'docopt' },
    'mechanicalsoup': { 'deb': 'python3-mechanicalsoup', 'pip': 'MechanicalSoup' },
}
if __name__ == '__main__':
    class DocoptExit(Exception): pass          # used if Docopt isn't installed
    try:
        from sys import stderr
        from docopt import (docopt, DocoptExit)
        # Parse command line args with docopt and pass them to main().
        main(docopt(cmd_help(raw = True), help = False))
    except KeyboardInterrupt:
        print('\n*** BREAK: Killed by ^C (SIGINT signal)', file = stderr)
        raise SystemExit(130)
    except (DocoptExit, SignbankError) as e:
        print(prettify_docopt_error(e), file = stderr)
        raise SystemExit(5)
    except ModuleNotFoundError as e:
        print(f"ERROR: Cannot load the required Python module '{e.name}'.\n" + (
            f"To install, run one of following commands (depending on your system):\n\n"
            f"    sudo apt install {package_name[e.name]['deb']}  # (Debian/Ubuntu etc.)\n"
            f"    pip install {package_name[e.name]['pip']}               # (Python installer)\n"
            if e.name in package_name.keys() else
            f"    (Are you sure that that module is installed on your system?)"
        ), file = stderr)
        raise SystemExit(10)

#[eof]
